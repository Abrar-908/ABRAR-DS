#include <stdio.h>
#include <limits.h>

#define N 4            // number of cities
#define INF 999999999

int tsp(int mask, int pos, int dp[1<<N][N], int dist[N][N]) {
    if (mask == (1<<N) - 1) {
        return dist[pos][0]; // return to start city
    }
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INF;
    for (int city = 0; city < N; city++) {
        if ((mask & (1<<city)) == 0) {  // if city not visited
            int newAns = dist[pos][city] + tsp(mask | (1<<city), city, dp, dist);
            if (newAns < ans) {
                ans = newAns;
            }
        }
    }
    return dp[mask][pos] = ans;
}

int main() {
    int dist[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int dp[1<<N][N];
    for (int i = 0; i < (1<<N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    int cost = tsp(1, 0, dp, dist);  // start at city 0 with mask = 1
    printf("Minimum cost of traveling salesman tour = %d\n", cost);

    return 0;
}
