#include <stdio.h>
#define SIZE 10   // size of hash table

int hashTable[SIZE];

// Initialize hash table
void initTable() {
    for (int i = 0; i < SIZE; i++)
        hashTable[i] = -1;  // -1 means empty
}

// Hash function
int hash(int key) {
    return key % SIZE;
}

// Insert key into hash table
void insert(int key) {
    int index = hash(key);

    // Linear probing in case of collision
    int i = 0;
    while (hashTable[(index + i) % SIZE] != -1 && i < SIZE) {
        i++;
    }

    if (i == SIZE) {
        printf("Hash table is full! Cannot insert %d\n", key);
        return;
    }

    hashTable[(index + i) % SIZE] = key;
    printf("%d inserted at index %d\n", key, (index + i) % SIZE);
}

// Search for a key
void search(int key) {
    int index = hash(key);

    int i = 0;
    while (hashTable[(index + i) % SIZE] != -1 && i < SIZE) {
        if (hashTable[(index + i) % SIZE] == key) {
            printf("%d found at index %d\n", key, (index + i) % SIZE);
            return;
        }
        i++;
    }

    printf("%d not found in hash table\n", key);
}

// Display hash table
void display() {
    printf("Hash Table:\n");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1)
            printf("Index %d --> %d\n", i, hashTable[i]);
        else
            printf("Index %d --> Empty\n", i);
    }
}

int main() {
    int choice, key;

    initTable();

    while (1) {
        printf("\n--- Hashing with Linear Probing ---\n");
        printf("1. Insert\n2. Search\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &key);
                insert(key);
                break;
            case 2:
                printf("Enter key to search: ");
                scanf("%d", &key);
                search(key);
                break;
            case 3:
                display();
                break;
            case 4:
                return 0;
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
}
