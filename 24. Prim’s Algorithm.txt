#include <stdio.h>
#define INF 9999
#define MAX 100

void prims(int graph[MAX][MAX], int n) {
    int selected[MAX];
    int no_of_edges = 0;
    int x, y; // to store edge indices

    // Initially no vertices are selected
    for (int i = 0; i < n; i++)
        selected[i] = 0;

    // Start from vertex 0
    selected[0] = 1;

    printf("\nMinimum Spanning Tree using Prim's Algorithm:\n");

    while (no_of_edges < n - 1) {
        int min = INF;
        x = 0;
        y = 0;

        // Find minimum edge connecting a selected and non-selected vertex
        for (int i = 0; i < n; i++) {
            if (selected[i]) {
                for (int j = 0; j < n; j++) {
                    if (!selected[j] && graph[i][j]) { // if not selected and edge exists
                        if (min > graph[i][j]) {
                            min = graph[i][j];
                            x = i;
                            y = j;
                        }
                    }
                }
            }
        }

        printf("Edge %d: (%d - %d) cost: %d\n", no_of_edges + 1, x, y, graph[x][y]);
        selected[y] = 1;
        no_of_edges++;
    }
}

int main() {
    int n;
    int graph[MAX][MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (0 if no edge):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    prims(graph, n);

    return 0;
}
