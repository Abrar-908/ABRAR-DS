#include <stdio.h>
#define MAX 30

// Structure to represent an edge
struct Edge {
    int u, v, w;
};

// Function to find parent (for union-find)
int find(int parent[], int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

// Function to perform union (for union-find)
void unionSets(int parent[], int u, int v) {
    int pu = find(parent, u);
    int pv = find(parent, v);
    parent[pu] = pv;
}

void kruskal(struct Edge edges[], int n, int e) {
    struct Edge result[MAX];
    int parent[MAX];
    int i, j, k = 0;
    int totalCost = 0;

    // Initialize parent (disjoint sets)
    for (i = 0; i < n; i++)
        parent[i] = i;

    // Sort edges by weight (simple bubble sort)
    for (i = 0; i < e - 1; i++) {
        for (j = 0; j < e - i - 1; j++) {
            if (edges[j].w > edges[j + 1].w) {
                struct Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    printf("\nMinimum Spanning Tree using Kruskal's Algorithm:\n");

    for (i = 0; i < e; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].w;

        if (find(parent, u) != find(parent, v)) {
            result[k++] = edges[i];
            totalCost += w;
            unionSets(parent, u, v);
        }
    }

    // Print the MST
    for (i = 0; i < k; i++) {
        printf("Edge %d: (%d - %d) cost: %d\n", i + 1, result[i].u, result[i].v, result[i].w);
    }
    printf("Total Minimum Cost = %d\n", totalCost);
}

int main() {
    int n, e;
    struct Edge edges[MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &e);

    printf("Enter edges (u v w):\n");
    for (int i = 0; i < e; i++) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
    }

    kruskal(edges, n, e);

    return 0;
}
